name: Build ZArchive

on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch: # Added for manual runs

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        # We add a new 'arch' key to help us identify the build
        # It's 'native' by default for the existing jobs
        arch: [native] 
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            arch: native
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            arch: native
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            arch: native
          # --- NEW SECTION FOR ARM ---
          # Add a dedicated ARM64 cross-compilation job
          - os: ubuntu-latest
            build_type: Release
            # The name of the cross-compiler executable for C
            c_compiler: aarch64-linux-gnu-gcc
            # The name of the cross-compiler executable for C++
            cpp_compiler: aarch64-linux-gnu-g++
            # Our custom identifier for this architecture
            arch: arm64
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    # --- NEW STEP ---
    - name: Install ARM Cross-Compiler (if needed)
      # This step only runs for our new 'arm64' matrix entry
      if: matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # No changes needed here, as it's already parameterized!
      # CMake is smart enough to detect a cross-compilation from the compiler name.
      # This now runs for all Linux jobs (native and ARM)
      if: runner.os == 'Linux'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DBUILD_STATIC_TOOL=ON
        -S ${{ github.workspace }}

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      # No changes needed here
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DBUILD_STATIC_TOOL=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      # --- IMPORTANT CAVEAT ---
      # You CANNOT run ARM tests on an x86-64 runner directly.
      # This step will fail for the ARM build.
      # We add a condition to skip it for ARM builds.
      if: matrix.arch != 'arm64'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        # The artifact name now includes the architecture
        name: zarchive-build-${{matrix.os}}-${{matrix.build_type}}-${{matrix.c_compiler}}-${{matrix.arch}}
        path: ${{ steps.strings.outputs.build-output-dir }}

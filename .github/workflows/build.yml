name: Build ZArchive

on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        arch: [native]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            arch: native
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            arch: native
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            arch: native
          - os: ubuntu-latest
            build_type: Release
            c_compiler: aarch64-linux-gnu-gcc
            cpp_compiler: aarch64-linux-gnu-g++
            arch: arm64
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install ARM Cross-Compiler (if needed)
      if: matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    # --- NEW STEP ---
    # Create the necessary vcpkg configuration files for cross-compiling to ARM.
    - name: Create vcpkg ARM Configuration
      if: matrix.arch == 'arm64'
      run: |
        # 1. Create a toolchain file that tells CMake which compilers to use for ARM
        echo 'set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)' > ${{ github.workspace }}/aarch64-toolchain.cmake
        echo 'set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)' >> ${{ github.workspace }}/aarch64-toolchain.cmake

        # 2. Create a custom vcpkg triplet file for ARM
        # This tells vcpkg the target architecture and points it to our toolchain file.
        # It's crucial to create this in a subdirectory that vcpkg can find.
        mkdir ${{ github.workspace }}/custom-triplets
        cat <<EOF > ${{ github.workspace }}/custom-triplets/arm64-linux.vcpkg
        set(VCPKG_TARGET_ARCHITECTURE arm64)
        set(VCPKG_CRT_LINKAGE dynamic)
        set(VCPKG_LIBRARY_LINKAGE dynamic)
        set(VCPKG_CHAINLOAD_TOOLCHAIN_FILE \${CMAKE_CURRENT_LIST_DIR}/../../aarch64-toolchain.cmake)
        EOF

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      run: |
        # This is the base command for all Linux builds
        CMAKE_ARGS=(
          "-B ${{ steps.strings.outputs.build-output-dir }}"
          "-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}"
          "-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}"
          "-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}"
          "-DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake"
          "-DBUILD_STATIC_TOOL=ON"
          "-S ${{ github.workspace }}"
        )

        # --- MODIFIED SECTION ---
        # If this is the ARM build, we add the vcpkg triplet arguments.
        if [[ "${{ matrix.arch }}" == "arm64" ]]; then
          CMAKE_ARGS+=(
            "-DVCPKG_TARGET_TRIPLET=arm64-linux"
            "-DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/custom-triplets"
          )
        fi
        
        cmake "${CMAKE_ARGS[@]}"

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DBUILD_STATIC_TOOL=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      if: matrix.arch != 'arm64'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zarchive-build-${{matrix.os}}-${{matrix.build_type}}-${{matrix.c_compiler}}-${{matrix.arch}}
        path: ${{ steps.strings.outputs.build-output-dir }}
